// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/order_history.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderHistoryService_AddOrderHistory_FullMethodName    = "/orderhistory.OrderHistoryService/AddOrderHistory"
	OrderHistoryService_GetOrderHistory_FullMethodName    = "/orderhistory.OrderHistoryService/GetOrderHistory"
	OrderHistoryService_GetOrderById_FullMethodName       = "/orderhistory.OrderHistoryService/GetOrderById"
	OrderHistoryService_Reorder_FullMethodName            = "/orderhistory.OrderHistoryService/Reorder"
	OrderHistoryService_DeleteOrderHistory_FullMethodName = "/orderhistory.OrderHistoryService/DeleteOrderHistory"
	OrderHistoryService_GetRecentOrders_FullMethodName    = "/orderhistory.OrderHistoryService/GetRecentOrders"
)

// OrderHistoryServiceClient is the client API for OrderHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderHistoryServiceClient interface {
	AddOrderHistory(ctx context.Context, in *AddOrderHistoryRequest, opts ...grpc.CallOption) (*AddOrderHistoryResponse, error)
	GetOrderHistory(ctx context.Context, in *GetOrderHistoryRequest, opts ...grpc.CallOption) (*GetOrderHistoryResponse, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error)
	Reorder(ctx context.Context, in *ReorderRequest, opts ...grpc.CallOption) (*ReorderResponse, error)
	DeleteOrderHistory(ctx context.Context, in *DeleteOrderHistoryRequest, opts ...grpc.CallOption) (*DeleteOrderHistoryResponse, error)
	GetRecentOrders(ctx context.Context, in *GetRecentOrdersRequest, opts ...grpc.CallOption) (*GetRecentOrdersResponse, error)
}

type orderHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderHistoryServiceClient(cc grpc.ClientConnInterface) OrderHistoryServiceClient {
	return &orderHistoryServiceClient{cc}
}

func (c *orderHistoryServiceClient) AddOrderHistory(ctx context.Context, in *AddOrderHistoryRequest, opts ...grpc.CallOption) (*AddOrderHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrderHistoryResponse)
	err := c.cc.Invoke(ctx, OrderHistoryService_AddOrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHistoryServiceClient) GetOrderHistory(ctx context.Context, in *GetOrderHistoryRequest, opts ...grpc.CallOption) (*GetOrderHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderHistoryResponse)
	err := c.cc.Invoke(ctx, OrderHistoryService_GetOrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHistoryServiceClient) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderByIdResponse)
	err := c.cc.Invoke(ctx, OrderHistoryService_GetOrderById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHistoryServiceClient) Reorder(ctx context.Context, in *ReorderRequest, opts ...grpc.CallOption) (*ReorderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReorderResponse)
	err := c.cc.Invoke(ctx, OrderHistoryService_Reorder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHistoryServiceClient) DeleteOrderHistory(ctx context.Context, in *DeleteOrderHistoryRequest, opts ...grpc.CallOption) (*DeleteOrderHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrderHistoryResponse)
	err := c.cc.Invoke(ctx, OrderHistoryService_DeleteOrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHistoryServiceClient) GetRecentOrders(ctx context.Context, in *GetRecentOrdersRequest, opts ...grpc.CallOption) (*GetRecentOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentOrdersResponse)
	err := c.cc.Invoke(ctx, OrderHistoryService_GetRecentOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderHistoryServiceServer is the server API for OrderHistoryService service.
// All implementations must embed UnimplementedOrderHistoryServiceServer
// for forward compatibility.
type OrderHistoryServiceServer interface {
	AddOrderHistory(context.Context, *AddOrderHistoryRequest) (*AddOrderHistoryResponse, error)
	GetOrderHistory(context.Context, *GetOrderHistoryRequest) (*GetOrderHistoryResponse, error)
	GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error)
	Reorder(context.Context, *ReorderRequest) (*ReorderResponse, error)
	DeleteOrderHistory(context.Context, *DeleteOrderHistoryRequest) (*DeleteOrderHistoryResponse, error)
	GetRecentOrders(context.Context, *GetRecentOrdersRequest) (*GetRecentOrdersResponse, error)
	mustEmbedUnimplementedOrderHistoryServiceServer()
}

// UnimplementedOrderHistoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderHistoryServiceServer struct{}

func (UnimplementedOrderHistoryServiceServer) AddOrderHistory(context.Context, *AddOrderHistoryRequest) (*AddOrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderHistory not implemented")
}
func (UnimplementedOrderHistoryServiceServer) GetOrderHistory(context.Context, *GetOrderHistoryRequest) (*GetOrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistory not implemented")
}
func (UnimplementedOrderHistoryServiceServer) GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderHistoryServiceServer) Reorder(context.Context, *ReorderRequest) (*ReorderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reorder not implemented")
}
func (UnimplementedOrderHistoryServiceServer) DeleteOrderHistory(context.Context, *DeleteOrderHistoryRequest) (*DeleteOrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderHistory not implemented")
}
func (UnimplementedOrderHistoryServiceServer) GetRecentOrders(context.Context, *GetRecentOrdersRequest) (*GetRecentOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentOrders not implemented")
}
func (UnimplementedOrderHistoryServiceServer) mustEmbedUnimplementedOrderHistoryServiceServer() {}
func (UnimplementedOrderHistoryServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrderHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderHistoryServiceServer will
// result in compilation errors.
type UnsafeOrderHistoryServiceServer interface {
	mustEmbedUnimplementedOrderHistoryServiceServer()
}

func RegisterOrderHistoryServiceServer(s grpc.ServiceRegistrar, srv OrderHistoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderHistoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderHistoryService_ServiceDesc, srv)
}

func _OrderHistoryService_AddOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHistoryServiceServer).AddOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHistoryService_AddOrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHistoryServiceServer).AddOrderHistory(ctx, req.(*AddOrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHistoryService_GetOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHistoryServiceServer).GetOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHistoryService_GetOrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHistoryServiceServer).GetOrderHistory(ctx, req.(*GetOrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHistoryService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHistoryServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHistoryService_GetOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHistoryServiceServer).GetOrderById(ctx, req.(*GetOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHistoryService_Reorder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHistoryServiceServer).Reorder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHistoryService_Reorder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHistoryServiceServer).Reorder(ctx, req.(*ReorderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHistoryService_DeleteOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHistoryServiceServer).DeleteOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHistoryService_DeleteOrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHistoryServiceServer).DeleteOrderHistory(ctx, req.(*DeleteOrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHistoryService_GetRecentOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHistoryServiceServer).GetRecentOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHistoryService_GetRecentOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHistoryServiceServer).GetRecentOrders(ctx, req.(*GetRecentOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderHistoryService_ServiceDesc is the grpc.ServiceDesc for OrderHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderhistory.OrderHistoryService",
	HandlerType: (*OrderHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrderHistory",
			Handler:    _OrderHistoryService_AddOrderHistory_Handler,
		},
		{
			MethodName: "GetOrderHistory",
			Handler:    _OrderHistoryService_GetOrderHistory_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _OrderHistoryService_GetOrderById_Handler,
		},
		{
			MethodName: "Reorder",
			Handler:    _OrderHistoryService_Reorder_Handler,
		},
		{
			MethodName: "DeleteOrderHistory",
			Handler:    _OrderHistoryService_DeleteOrderHistory_Handler,
		},
		{
			MethodName: "GetRecentOrders",
			Handler:    _OrderHistoryService_GetRecentOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order_history.proto",
}
